"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[125],{9236:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var i=t(5893),s=t(1151);const o={sidebar_position:1,slug:"/pod-lifecycle",title:"Pod LifeCycle"},a=void 0,r={id:"Containers/OpenShift/Workloads/pod_lifecycle",title:"Pod LifeCycle",description:"---",source:"@site/docs/Containers/OpenShift/Workloads/pod_lifecycle.mdx",sourceDirName:"Containers/OpenShift/Workloads",slug:"/pod-lifecycle",permalink:"/zenith/pod-lifecycle",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"AshutoshPatole18",lastUpdatedAt:1706788254,formattedLastUpdatedAt:"Feb 1, 2024",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"/pod-lifecycle",title:"Pod LifeCycle"},sidebar:"tutorialSidebar",previous:{title:"Operators in Openshift Network",permalink:"/zenith/operators-in-openshift-network"},next:{title:"Deployment",permalink:"/zenith/deployments"}},d={},l=[{value:"Pod lifetime",id:"pod-lifetime",level:3},{value:"Pod phase",id:"pod-phase",level:3},{value:"Container states",id:"container-states",level:3},{value:"Waiting",id:"waiting",level:4},{value:"Running",id:"running",level:4},{value:"Terminated",id:"terminated",level:4},{value:"Container restart policy",id:"container-restart-policy",level:3},{value:"Pod conditions",id:"pod-conditions",level:3},{value:"Container probes",id:"container-probes",level:3},{value:"Check mechanisms",id:"check-mechanisms",level:4},{value:"Probe outcome",id:"probe-outcome",level:3},{value:"Types of probe",id:"types-of-probe",level:3},{value:"Termination of Pods",id:"termination-of-pods",level:3},{value:"Forced Pod termination",id:"forced-pod-termination",level:3}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["Pods follow a defined lifecycle, starting in the ",(0,i.jsx)(n.code,{children:"Pending"})," phase, moving through Running if at least one of its primary containers starts OK, and then through either the ",(0,i.jsx)(n.code,{children:"Succeeded"})," or ",(0,i.jsx)(n.code,{children:"Failed"})," phases depending on whether any container in the Pod terminated in failure."]}),"\n",(0,i.jsx)(n.p,{children:"Whilst a Pod is running, the kubelet is able to restart containers to handle some kind of faults. Within a Pod, Kubernetes tracks different container states and determines what action to take to make the Pod healthy again."}),"\n",(0,i.jsx)(n.p,{children:"Pods are only scheduled once in their lifetime. Once a Pod is scheduled (assigned) to a Node, the Pod runs on that Node until it stops or is terminated."}),"\n",(0,i.jsx)(n.h3,{id:"pod-lifetime",children:"Pod lifetime"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Like individual application containers, Pods are considered to be relatively ephemeral (rather than durable) entities. Pods are created, assigned a unique ID (UID), and scheduled to nodes where they remain until termination (according to restart policy) or deletion. If a Node dies, the Pods scheduled to that node are scheduled for deletion after a timeout period."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Pods do not, by themselves, self-heal. If a Pod is scheduled to a node that then fails, the Pod is deleted; likewise, a Pod won't survive an eviction due to a lack of resources or Node maintenance. Kubernetes uses a higher-level abstraction, called a controller, that handles the work of managing the relatively disposable Pod instances."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:'A given Pod (as defined by a UID) is never "rescheduled" to a different node; instead, that Pod can be replaced by a new, near-identical Pod, with even the same name if desired, but with a different UID.'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"When something is said to have the same lifetime as a Pod, such as a volume, that means that the thing exists as long as that specific Pod (with that exact UID) exists. If that Pod is deleted for any reason, and even if an identical replacement is created, the related thing (a volume, in this example) is also destroyed and created anew."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"pod-phase",children:"Pod phase"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Value"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Pending"})}),(0,i.jsx)(n.td,{children:"The Pod has been accepted by the Kubernetes cluster, but one or more of the containers has not been set up and made ready to run. This includes time a Pod spends waiting to be scheduled as well as the time spent downloading container images over the network."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Running"})}),(0,i.jsx)(n.td,{children:"The Pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Succeeded"})}),(0,i.jsx)(n.td,{children:"All containers in the Pod have terminated in success, and will not be restarted."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Failed"})}),(0,i.jsx)(n.td,{children:"All containers in the Pod have terminated, and at least one container has terminated in failure. That is, the container either exited with non-zero status or was terminated by the system."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Unknown"})}),(0,i.jsx)(n.td,{children:"For some reason the state of the Pod could not be obtained. This phase typically occurs due to an error in communicating with the node where the Pod should be running."})]})]})]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"When a Pod is being deleted, it is shown as Terminating by some kubectl commands. This Terminating status is not one of the Pod phases. A Pod is granted a term to terminate gracefully, which defaults to 30 seconds. You can use the flag --force to terminate a Pod by force."})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["If a node dies or is disconnected from the rest of the cluster, Kubernetes applies a policy for setting the phase of all Pods on the lost node to ",(0,i.jsx)(n.code,{children:"Failed"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"container-states",children:"Container states"}),"\n",(0,i.jsx)(n.p,{children:"Once the scheduler assigns a Pod to a Node, the kubelet starts creating containers for that Pod using a container runtime. There are three possible container states: Waiting, Running, and Terminated."}),"\n",(0,i.jsx)(n.p,{children:"To check the state of a Pod's containers, you can use"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"kubectl describe pod pod-name\n"})}),"\n",(0,i.jsx)(n.p,{children:"The output shows the state for each container within that Pod."}),"\n",(0,i.jsx)(n.p,{children:"Each state has a specific meaning:"}),"\n",(0,i.jsx)(n.h4,{id:"waiting",children:"Waiting"}),"\n",(0,i.jsx)(n.p,{children:"If a container is not in either the Running or Terminated state, it is Waiting. A container in the Waiting state is still running the operations it requires in order to complete start up: for example, pulling the container image from a container image registry, or applying Secret data."}),"\n",(0,i.jsx)(n.h4,{id:"running",children:"Running"}),"\n",(0,i.jsx)(n.p,{children:"The Running status indicates that a container is executing without issues. If there was a postStart hook configured, it has already executed and finished."}),"\n",(0,i.jsx)(n.h4,{id:"terminated",children:"Terminated"}),"\n",(0,i.jsx)(n.p,{children:"A container in the Terminated state began execution and then either ran to completion or failed for some reason."}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["When you use ",(0,i.jsx)(n.code,{children:"kubectl"})," to query a Pod with a container that is  Waiting/Running/Terminated , you also see a Reason field to summarize why the container is in that state."]})}),"\n",(0,i.jsx)(n.h3,{id:"container-restart-policy",children:"Container restart policy"}),"\n",(0,i.jsxs)(n.p,{children:["The spec of a Pod has a ",(0,i.jsx)(n.code,{children:"restartPolicy"})," field with possible values"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Always"}),"\n",(0,i.jsx)(n.li,{children:"OnFailure"}),"\n",(0,i.jsxs)(n.li,{children:["Never\nThe default value is ",(0,i.jsx)(n.strong,{children:"Always"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"restartPolicy"})," applies to all containers in the Pod. ",(0,i.jsx)(n.code,{children:"restartPolicy"})," only refers to restarts of the containers by the kubelet on the same node. After containers in a Pod exit, the kubelet restarts them with an exponential back-off delay (10s, 20s, 40s, \u2026), that is ",(0,i.jsx)(n.strong,{children:"capped at five minutes"}),". Once a container has executed for 10 minutes without any problems, the kubelet resets the restart backoff timer for that container."]}),"\n",(0,i.jsx)(n.h3,{id:"pod-conditions",children:"Pod conditions"}),"\n",(0,i.jsx)(n.p,{children:"A Pod has a PodStatus, which has an array of PodConditions through which the Pod has or has not passed:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"PodScheduled"}),": the Pod has been scheduled to a node."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ContainersReady"}),": all containers in the Pod are ready."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Initialized"}),": all init containers have completed successfully."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Ready"}),": the Pod is able to serve requests and should be added to the load balancing pools of all matching Services."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"container-probes",children:"Container probes"}),"\n",(0,i.jsx)(n.p,{children:"A probe is a diagnostic performed periodically by the kubelet on a container. To perform a diagnostic, the kubelet either executes code within the container, or makes a network request."}),"\n",(0,i.jsx)(n.h4,{id:"check-mechanisms",children:"Check mechanisms"}),"\n",(0,i.jsx)(n.p,{children:"There are four different ways to check a container using a probe. Each probe must define exactly one of these four mechanisms:"}),"\n",(0,i.jsx)(n.p,{children:"=> exec"}),"\n",(0,i.jsx)(n.p,{children:"Executes a specified command inside the container. The diagnostic is considered successful if the command exits with a status code of 0."}),"\n",(0,i.jsx)(n.p,{children:"=> grpc"}),"\n",(0,i.jsx)(n.p,{children:"Performs a remote procedure call using gRPC. The target should implement gRPC health checks. The diagnostic is considered successful if the status of the response is SERVING.\ngRPC probes are an alpha feature and are only available if you enable the GRPCContainerProbe feature gate."}),"\n",(0,i.jsx)(n.p,{children:"=> httpGet"}),"\n",(0,i.jsx)(n.p,{children:"Performs an HTTP GET request against the Pod's IP address on a specified port and path. The diagnostic is considered successful if the response has a status code greater than or equal to 200 and less than 400."}),"\n",(0,i.jsx)(n.p,{children:"=> tcpSocket"}),"\n",(0,i.jsx)(n.p,{children:"Performs a TCP check against the Pod's IP address on a specified port. The diagnostic is considered successful if the port is open. If the remote system (the container) closes the connection immediately after it opens, this counts as healthy."}),"\n",(0,i.jsx)(n.h3,{id:"probe-outcome",children:"Probe outcome"}),"\n",(0,i.jsx)(n.p,{children:"Each probe has one of three results:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Success :\nThe container passed the diagnostic."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Failure :\nThe container failed the diagnostic."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Unknown :\nThe diagnostic failed (no action should be taken, and the kubelet will make further checks)."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"types-of-probe",children:"Types of probe"}),"\n",(0,i.jsx)(n.p,{children:"The kubelet can optionally perform and react to three kinds of probes on running containers:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"livenessProbe"}),"\nIndicates whether the container is running. If the liveness probe fails, the kubelet kills the container, and the container is subjected to its ",(0,i.jsx)(n.a,{href:"#container-restart-policy",children:"restart"})," policy. If a container does not provide a liveness probe, the default state is Success."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"readinessProbe"}),"\nIndicates whether the container is ready to respond to requests. If the readiness probe fails, the endpoints controller removes the Pod's IP address from the endpoints of all Services that match the Pod. The default state of readiness before the initial delay is Failure. If a container does not provide a readiness probe, the default state is Success."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"startupProbe"}),"\nIndicates whether the application within the container is started. All other probes are disabled if a startup probe is provided, until it succeeds. If the startup probe fails, the kubelet kills the container, and the container is subjected to its ",(0,i.jsx)(n.a,{href:"#container-restart-policy",children:"restart"})," policy. If a container does not provide a startup probe, the default state is Success."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"termination-of-pods",children:"Termination of Pods"}),"\n",(0,i.jsxs)(n.p,{children:["Because Pods represent processes running on nodes in the cluster, it is important to allow those processes to gracefully terminate when they are no longer needed (rather than being abruptly stopped with a ",(0,i.jsx)(n.code,{children:"KILL"})," signal and having no chance to clean up)."]}),"\n",(0,i.jsx)(n.p,{children:"The design aim is for you to be able to request deletion and know when processes terminate, but also be able to ensure that deletes eventually complete. When you request deletion of a Pod, the cluster records and tracks the intended grace period before the Pod is allowed to be forcefully killed. With that forceful shutdown tracking in place, the kubelet attempts graceful shutdown."}),"\n",(0,i.jsxs)(n.p,{children:["Typically, the container runtime sends a TERM signal to the main process in each container. Many container runtimes respect the ",(0,i.jsx)(n.code,{children:"STOPSIGNAL"})," value defined in the container image and send this instead of TERM. Once the grace period has expired, the ",(0,i.jsx)(n.code,{children:"KILL"})," signal is sent to any remaining processes, and the Pod is then deleted from the API Server. If the kubelet or the container runtime's management service is restarted while waiting for processes to terminate, the cluster retries from the start including the full original grace period."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["You use the ",(0,i.jsx)(n.code,{children:"kubectl"})," tool to manually delete a specific Pod, with the default grace period (30 seconds)."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"forced-pod-termination",children:"Forced Pod termination"}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsx)(n.p,{children:"Forced deletions can be potentially disruptive for some workloads and their Pods."})}),"\n",(0,i.jsxs)(n.p,{children:["By default, all deletes are graceful within 30 seconds. The kubectl delete command supports the ",(0,i.jsx)(n.code,{children:"--grace-period=<seconds>"})," option which allows you to override the default and specify your own value."]}),"\n",(0,i.jsx)(n.p,{children:"Setting the grace period to 0 forcibly and immediately deletes the Pod from the API server. If the pod was still running on a node, that forcible deletion triggers the kubelet to begin immediate cleanup."}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["You must specify an additional flag ",(0,i.jsx)(n.code,{children:"--force"})," along with ",(0,i.jsx)(n.code,{children:"--grace-period=0"})," in order to perform force deletions."]})}),"\n",(0,i.jsx)(n.p,{children:"When a force deletion is performed, the API server does not wait for confirmation from the kubelet that the Pod has been terminated on the node it was running on. It removes the Pod in the API immediately so a new Pod can be created with the same name. On the node, Pods that are set to terminate immediately will still be given a small grace period before being force killed."})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>a});var i=t(7294);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);