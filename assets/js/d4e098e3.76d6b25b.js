"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2887],{9662:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=n(5893),s=n(1151);const r={slug:"/cut",tags:["linux","command"]},a=void 0,o={id:"Linux/Commands/Cut",title:"Cut",description:"---",source:"@site/docs/Linux/Commands/Cut.mdx",sourceDirName:"Linux/Commands",slug:"/cut",permalink:"/zenith/cut",draft:!1,unlisted:!1,tags:[{label:"linux",permalink:"/zenith/tags/linux"},{label:"command",permalink:"/zenith/tags/command"}],version:"current",lastUpdatedBy:"AshutoshPatole18",lastUpdatedAt:1706787778,formattedLastUpdatedAt:"Feb 1, 2024",frontMatter:{slug:"/cut",tags:["linux","command"]},sidebar:"tutorialSidebar",previous:{title:"Kill Signals",permalink:"/zenith/kill"},next:{title:"Obtaining FileSystem Information",permalink:"/zenith/dumpe2fs"}},l={},c=[];function d(e){const t={code:"code",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.p,{children:"The cut command extracts portions of input lines and displays them on standard output. You can specify what to cut from input lines in several ways:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"By Byte The -b list or --bytes=list option cuts the specified list of bytes from the input file. (The format of a list is described shortly.)"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"By Character The -c list or --characters=list option cuts the specified list of characters from the input file. In practice, this method and the by-byte method usually produce identical results. (If the input file uses a multi-byte encoding system, though, the results won\u2019t be identical.)"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"By Field The -f list or --fields=list option cuts the specified list of fields from the input file. By default, a field is a tab-delimited section of a line, but you can change the delimiting character with the -d char, --delim=char, or --delimiter=char option, where char is the character you want to use to delimit fields."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ ifconfig eth0\r\neth0 Link encap:Ethernet HWaddr 00:0C:76:96:A3:73\r\n inet addr:192.168.1.3 Bcast:192.168.1.255 Mask:255.255.255.0\r\n inet6 addr: fe80::20c:76ff:fe96:a373/64 Scope:Link\r\n UP BROADCAST NOTRAILERS RUNNING MULTICAST MTU:1500 Metric:1\r\n RX packets:7127424 errors:0 dropped:0 overruns:0 frame:0\r\n TX packets:5273519 errors:0 dropped:0 overruns:0 carrier:0\r\n collisions:0 txqueuelen:1000\r\n RX bytes:6272843708 (5982.2 Mb) TX bytes:1082453585 (1032.3 Mb)\r\n Interrupt:10 Base address:0xde00\n"})}),"\n",(0,i.jsx)(t.p,{children:"Unfortunately, most of this information is extraneous for the desired purpose. The hardware address is the 6-byte hexadecimal number following HWaddr. To extract that data, you can combine grep with cut in a pipe:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'[thor@marvel-studios ~]$ ifconfig eth0 | grep HWaddr | cut -d " " -f 11\n'})}),"\n",(0,i.jsx)(t.p,{children:"will result"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"00:0C:76:96:A3:73\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>a});var i=n(7294);const s={},r=i.createContext(s);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);