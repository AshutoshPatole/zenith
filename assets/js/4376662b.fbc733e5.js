"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[77],{9067:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var i=s(5893),r=s(1151);const t={sidebar_position:10,slug:"/misc",title:"Misc",tags:["script"]},a=void 0,o={id:"Linux/Script/am_i_root",title:"Misc",description:"---",source:"@site/docs/Linux/Script/99_am_i_root.mdx",sourceDirName:"Linux/Script",slug:"/misc",permalink:"/zenith/misc",draft:!1,unlisted:!1,tags:[{label:"script",permalink:"/zenith/tags/script"}],version:"current",lastUpdatedBy:"AshutoshPatole18",lastUpdatedAt:1706787778,formattedLastUpdatedAt:"Feb 1, 2024",sidebarPosition:10,frontMatter:{sidebar_position:10,slug:"/misc",title:"Misc",tags:["script"]},sidebar:"tutorialSidebar",previous:{title:"Test conditions in script",permalink:"/zenith/test-conditions"},next:{title:"What are certs?",permalink:"/zenith/certs"}},l={},c=[{value:"Am I root ?",id:"am-i-root-",level:2},{value:"Using whoami",id:"using-whoami",level:3},{value:"Using UID",id:"using-uid",level:3},{value:"Find if the previous command executed successfully.",id:"find-if-the-previous-command-executed-successfully",level:2},{value:"Find number of arguments passed.",id:"find-number-of-arguments-passed",level:2},{value:"Find if a binary program is present.",id:"find-if-a-binary-program-is-present",level:2},{value:"Using bash builtins",id:"using-bash-builtins",level:3},{value:"Using external commands",id:"using-external-commands",level:3},{value:"HereDoc",id:"heredoc",level:2}];function h(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"am-i-root-",children:"Am I root ?"}),"\n",(0,i.jsx)(n.p,{children:"Well there are technically many ways to find if the user is root."}),"\n",(0,i.jsx)(n.h3,{id:"using-whoami",children:"Using whoami"}),"\n",(0,i.jsxs)(n.p,{children:["The well known command ",(0,i.jsx)(n.code,{children:"whoami"})," will print the user currently logged in"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"[root@marvel-studios ~]$ whoami\nroot\n"})}),"\n",(0,i.jsx)(n.p,{children:"OR"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ whoami\nthor\n"})}),"\n",(0,i.jsx)(n.p,{children:"This can be applied in the script as"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'\n#!/bin/bash\nif [ "$(whoami)" != "root" ]\nthen\n  echo "You have to run this script as Superuser!"\n  exit 1\nfi\necho "You are a root user!\n'})}),"\n",(0,i.jsx)(n.h3,{id:"using-uid",children:"Using UID"}),"\n",(0,i.jsx)(n.p,{children:"Another way to find a root user is using it's UID. Since root user mostly has 0 in all the linux operating systems we can use this fact."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The builtin variable EUID contains UID of current user."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'\n#!/bin/bash\nif [ "$EUID" != "0" ]\nthen\n  echo "You have to run this script as Superuser!"\n  exit 1\nfi\necho "You are a root user!\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"danger",children:(0,i.jsx)(n.p,{children:"Do NOT use EUID if security is a concern."})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["You can also use the ",(0,i.jsx)(n.code,{children:"id"})," command to get the UID"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ id\nuid=1000(ashu) gid=1000(ashu) groups=1000(ashu),4(adm),10(wheel),11(cdrom)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Well we need just user id not group id's. You can pass ",(0,i.jsx)(n.code,{children:"-u"})," flag for getting just UID"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ id -u\n1000\n"})}),"\n",(0,i.jsx)(n.p,{children:"This would have been 0 if I were root user. Now let's use this in script."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'\n#!/bin/bash\nif [ "$(id -u)" != "0" ]; then\n   echo "I am not root!"\n   exit 1\nfi\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Prefer using ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"EUID"})})," variable since it is slightly performant than ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"id"})})]})}),"\n",(0,i.jsx)(n.h2,{id:"find-if-the-previous-command-executed-successfully",children:"Find if the previous command executed successfully."}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"$?"})," to get the exit status of the previous command."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:"title=finddifsuccess.sh",children:'\n#!/bin/bash\necho -e "1. success - command id -u\\n2. failure - command fid -u\\n"\n\nread -p "Enter your choice :"  choice\n\ncase $choice in\n  1) id -u ;;\n  2) fid -u ;;\n  *) "Please choose right option 1 or 2" exit 1 ;;\nesac\n\nif [[ "$?" != "0" ]]; then\n  echo "Something went wrong, Command failed ."\n  exit 1\nfi\necho "Command executed successfully."\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="findifsuccess Output"',children:"[thor@marvel-studios ~]$ ./findifsuccess.sh\n1. success - command whoami\n2. failure - command howami\n\nEnter your choice :1\n1000\nCommand executed successfully.\n[thor@marvel-studios ~]$ ./findifsuccess.sh\n1. success - command whoami\n2. failure - command howami\n\nEnter your choice :2\n./findifsuccess.sh: line 8: fid: command not found\nSomething went wrong, Command failed .\n"})}),"\n",(0,i.jsx)(n.h2,{id:"find-number-of-arguments-passed",children:"Find number of arguments passed."}),"\n",(0,i.jsxs)(n.p,{children:["There are many times when we have to pass dynamic values to the script through parameters like 1 or 2 parameters most probably and if the parameters are required then we have to validate the number of args passed to the script\nThis can be done by ",(0,i.jsx)(n.code,{children:"$#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\nif [[ "$#" != "2" ]]; then\n  cat <<- EOF\n  usage: $0 [arg1] [arg2]\nEOF\nexit 1\nfi\necho -e "param 1: $1\\nparam 2: $2"\n'})}),"\n",(0,i.jsx)(n.p,{children:"If you run this script without any param then it will cause an error"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ ./myScript\nusage: ./myScript.sh [arg1] [arg2]\n[thor@marvel-studios ~]$ ./myScript hello world\nparam 1: hello\nparam 2: world\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.p,{children:["Passing arguments to a script like this is not recommended. Use ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"getopts"})})," for passing multiple number of named arguments."]}),(0,i.jsx)(n.p,{children:"Example :"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ ./myScript -h hello -w world\n"})})]}),"\n",(0,i.jsx)(n.h2,{id:"find-if-a-binary-program-is-present",children:"Find if a binary program is present."}),"\n",(0,i.jsx)(n.h3,{id:"using-bash-builtins",children:"Using bash builtins"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ command pwd\n/home/thor\n[thor@marvel-studios ~]$ command -v pwd\npwd\n"})}),"\n",(0,i.jsx)(n.p,{children:"or"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"[thor@wetty-terminal ~]$ type ls\nls is aliased to 'ls --color=auto'\n[thor@wetty-terminal ~]$ type helo\n-bash: type: helo: not found\n"})}),"\n",(0,i.jsx)(n.h3,{id:"using-external-commands",children:"Using external commands"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"[thor@wetty-terminal ~]$ which ls\nalias ls='ls --color=auto'\n        /usr/bin/ls\n[thor@wetty-terminal ~]$ which helo\n/usr/bin/which: no helo in (/home/thor/.local/bin:/home/thor/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/var/lib/snapd/snap/bin:/usr/local/bin)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"heredoc",children:"HereDoc"}),"\n",(0,i.jsxs)(n.p,{children:["When writing shell scripts you may be in a situation where you need to pass a multiline block of text or code to an interactive command, such as ",(0,i.jsx)(n.code,{children:"tee"}),", ",(0,i.jsx)(n.code,{children:"cat"}),", or ",(0,i.jsx)(n.code,{children:"sftp"}),". In Bash and other shells like Zsh, a Here document (Heredoc) is a type of redirection that allows you to pass multiple lines of input to a command."]}),"\n",(0,i.jsx)(n.p,{children:"The general syntax is"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"[COMMAND] <<[-] 'DELIMITER'\n  HERE-DOCUMENT\nDELIMITER\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"You can use any string as a delimiting identifier, the most commonly used are EOF(End of File) or END."}),"\n",(0,i.jsxs)(n.li,{children:["Appending a minus sign to the redirection operator ",(0,i.jsx)(n.code,{children:"<<"}),"-, will cause all leading tab characters to be ignored. This allows you to use indentation when writing here-documents in shell scripts. Leading whitespace characters are not allowed, only tab."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"[thor@wetty-terminal ~]$ cat << EOF > doc\nhi this is line number 1\nhi this is line number 2\nhi this is line number 3\nhi this is line number 4\nhi this is line number 5\nhi this is line number 6\nEOF\n\n[thor@wetty-terminal ~]$ cat doc\nhi this is line number 1\nhi this is line number 2\nhi this is line number 3\nhi this is line number 4\nhi this is line number 5\nhi this is line number 6\n\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>a});var i=s(7294);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);