"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[530],{446:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var o=n(5893),s=n(1151);const a={sidebar_position:4,slug:"/daemonset",title:"DaemonSets"},i=void 0,r={id:"Containers/OpenShift/Workloads/dameonset",title:"DaemonSets",description:"---",source:"@site/docs/Containers/OpenShift/Workloads/dameonset.mdx",sourceDirName:"Containers/OpenShift/Workloads",slug:"/daemonset",permalink:"/zenith/daemonset",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"AshutoshPatole18",lastUpdatedAt:1706788254,formattedLastUpdatedAt:"Feb 1, 2024",sidebarPosition:4,frontMatter:{sidebar_position:4,slug:"/daemonset",title:"DaemonSets"},sidebar:"tutorialSidebar",previous:{title:"ReplicaSets",permalink:"/zenith/replicasets"},next:{title:"Init Containers",permalink:"/zenith/init-container"}},d={},l=[{value:"Alternatives to DaemonSet",id:"alternatives-to-daemonset",level:2},{value:"Init scripts",id:"init-scripts",level:3},{value:"Bare Pods",id:"bare-pods",level:3},{value:"Static Pods",id:"static-pods",level:3},{value:"Deployments",id:"deployments",level:3}];function c(e){const t={h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.p,{children:"A DaemonSet ensures that all (or some) Nodes run a copy of a Pod. As nodes are added to the cluster, Pods are added to them. As nodes are removed from the cluster, those Pods are garbage collected. Deleting a DaemonSet will clean up the Pods it created."}),"\n",(0,o.jsx)(t.p,{children:"Some typical uses of a DaemonSet are:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"running a cluster storage daemon on every node"}),"\n",(0,o.jsx)(t.li,{children:"running a logs collection daemon on every node"}),"\n",(0,o.jsx)(t.li,{children:"running a node monitoring daemon on every node"}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"In a simple case, one DaemonSet, covering all nodes, would be used for each type of daemon. A more complex setup might use multiple DaemonSets for a single type of daemon, but with different flags and/or different memory and cpu requests for different hardware types."}),"\n",(0,o.jsx)(t.h2,{id:"alternatives-to-daemonset",children:"Alternatives to DaemonSet"}),"\n",(0,o.jsx)(t.h3,{id:"init-scripts",children:"Init scripts"}),"\n",(0,o.jsx)(t.p,{children:"It is certainly possible to run daemon processes by directly starting them on a node (e.g. using init, upstartd, or systemd). This is perfectly fine. However, there are several advantages to running such processes via a DaemonSet:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Ability to monitor and manage logs for daemons in the same way as applications."}),"\n",(0,o.jsx)(t.li,{children:"Same config language and tools (e.g. Pod templates, oc) for daemons and applications."}),"\n",(0,o.jsx)(t.li,{children:"Running daemons in containers with resource limits increases isolation between daemons from app containers. However, this can also be accomplished by running the daemons in a container but not in a Pod (e.g. start directly via Docker)."}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"bare-pods",children:"Bare Pods"}),"\n",(0,o.jsx)(t.p,{children:"It is possible to create Pods directly which specify a particular node to run on. However, a DaemonSet replaces Pods that are deleted or terminated for any reason, such as in the case of node failure or disruptive node maintenance, such as a kernel upgrade. For this reason, you should use a DaemonSet rather than creating individual Pods."}),"\n",(0,o.jsx)(t.h3,{id:"static-pods",children:"Static Pods"}),"\n",(0,o.jsx)(t.p,{children:"It is possible to create Pods by writing a file to a certain directory watched by Kubelet. These are called static pods. Unlike DaemonSet, static Pods cannot be managed with kubectl or other Kubernetes API clients. Static Pods do not depend on the apiserver, making them useful in cluster bootstrapping cases. Also, static Pods may be deprecated in the future."}),"\n",(0,o.jsx)(t.h3,{id:"deployments",children:"Deployments"}),"\n",(0,o.jsx)(t.p,{children:"DaemonSets are similar to Deployments in that they both create Pods, and those Pods have processes which are not expected to terminate (e.g. web servers, storage servers)."}),"\n",(0,o.jsx)(t.p,{children:"Use a Deployment for stateless services, like frontends, where scaling up and down the number of replicas and rolling out updates are more important than controlling exactly which host the Pod runs on. Use a DaemonSet when it is important that a copy of a Pod always run on all or certain hosts, if the DaemonSet provides node-level functionality that allows other Pods to run correctly on that particular node."}),"\n",(0,o.jsx)(t.p,{children:"For example, network plugins often include a component that runs as a DaemonSet. The DaemonSet component makes sure that the node where it's running has working cluster networking."})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>i});var o=n(7294);const s={},a=o.createContext(s);function i(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);