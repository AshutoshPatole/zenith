"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8456],{3648:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>h});var t=s(5893),i=s(1151);const r={sidebar_position:3,slug:"/strict-mode",title:"Strict Mode in Shell Scripts",tags:["script"]},o=void 0,l={id:"Linux/Script/strict_mode",title:"Strict Mode in Shell Scripts",description:"---",source:"@site/docs/Linux/Script/3_strict_mode.mdx",sourceDirName:"Linux/Script",slug:"/strict-mode",permalink:"/zenith/strict-mode",draft:!1,unlisted:!1,tags:[{label:"script",permalink:"/zenith/tags/script"}],version:"current",lastUpdatedBy:"AshutoshPatole18",lastUpdatedAt:1706787778,formattedLastUpdatedAt:"Feb 1, 2024",sidebarPosition:3,frontMatter:{sidebar_position:3,slug:"/strict-mode",title:"Strict Mode in Shell Scripts",tags:["script"]},sidebar:"tutorialSidebar",previous:{title:"Quotes in bash script",permalink:"/zenith/quotes"},next:{title:"Parameter Expansion",permalink:"/zenith/parameter-expansion"}},a={},h=[{value:"Problem 1",id:"problem-1",level:2},{value:"1. set - The saviour",id:"1-set---the-saviour",level:3},{value:"Problem 2",id:"problem-2",level:2},{value:"set -u",id:"set--u",level:3},{value:"Problem 3",id:"problem-3",level:2},{value:"set -o pipefail",id:"set--o-pipefail",level:3},{value:"Disable strict mode temporarily",id:"disable-strict-mode-temporarily",level:2}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"Often times when we write scripts it is hard to debug bugs because scripts do not work as we think they should.\nFor example, take any programming language(I'm assuming python here) if any error occurs inside the program it halts immediately without running next lines like"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'print("Hello")\nprint("world)     # error here\nprint("!")\n'})}),"\n",(0,t.jsx)(n.p,{children:"We got this when compiled"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'File "<string>", line 4\n    print("world)\n                ^\nSyntaxError: EOL while scanning string literal\n'})}),"\n",(0,t.jsx)(n.h2,{id:"problem-1",children:"Problem 1"}),"\n",(0,t.jsx)(n.p,{children:"Now let's look what bash script does here"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="hello.sh"',children:'\n#!/bin/bash\necho "hello"\nfailHere=$(somethingToFail)  # this should fail\necho "world!"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["As you can see this should definitely fail in second line and ",(0,t.jsx)(n.code,{children:'echo "world!"'})," should not be printed but it does."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ ./hello.sh \nhello\n./hello.sh: line 4: somethingToFail: command not found\nworld!\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This shouldn't be the perfect way of writing scripts. What if there was a command which depended on previous execution state? It will get executed whereas it shouldn't. And most importantly even if the script had an error it returns a ",(0,t.jsx)(n.code,{children:"0"})," result code which means everything went fine."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ ./hello.sh \nhello\n./hello.sh: line 4: somethingToFail: command not found\nworld!\n[thor@marvel-studios ~]$ echo $?\n0\n"})}),"\n",(0,t.jsx)(n.p,{children:"There are multiple things which should be taken care of while writing scripts. I have added some of the scenarios with solutions to avoid them."}),"\n",(0,t.jsx)(n.h3,{id:"1-set---the-saviour",children:"1. set - The saviour"}),"\n",(0,t.jsxs)(n.p,{children:["We looked the first problem above and in order to solve it we have to use ",(0,t.jsx)(n.code,{children:"set"})," lines. These lines deliberately cause your script to fail. Believe me, this is a good thing. With these settings, certain common errors will cause the script to immediately fail, explicitly and loudly. Otherwise, you can get hidden bugs that are discovered only when they blow up in production."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"set -e"})," option instructs bash to immediately exit if any command [1] has a non-zero exit status. You wouldn't want to set this for your command-line shell, but in a script it's massively helpful."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="hello.sh"',children:'\n#!/bin/bash\nset -e\necho "hello"\nfailHere=$(somethingToFail)  # this should fail\necho "world!"\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now this solves the 2 mentioned problems"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"It does not run lines after it encounter errors."}),"\n",(0,t.jsx)(n.li,{children:"It does not returns a 0 exit code"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ ./hello.sh \nhello\n./hello.sh: line 5: somethingToFail: command not found\n[thor@marvel-studios ~]$ echo $?\n127\n"})}),"\n",(0,t.jsx)(n.p,{children:"(127 exit code means command not found)"}),"\n",(0,t.jsx)(n.h2,{id:"problem-2",children:"Problem 2"}),"\n",(0,t.jsxs)(n.p,{children:["Sometimes we are in a too much hurry that we either forget to declare a variable or we mis-spell it which is kinda hard to identify if the variable is used in the form of ",(0,t.jsx)(n.code,{children:"string interpolation"}),". This is where we get our second problem. For example"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="variable.sh"',children:'\n\n#!/bin/bash\nfirstName="Thor"\nfullName="$firstname, the Odin\'s son"\necho "$fullName"\n'})}),"\n",(0,t.jsx)(n.p,{children:"Just take a moment here and see where did the script went wrong and what do you think will happen if we run this script?"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ ./variable.sh \n, the Odin's son\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now you would have got the bug. The script ran fine but we misspelled the ",(0,t.jsx)(n.code,{children:"firstName"})," camelCase variable as ",(0,t.jsx)(n.code,{children:"firstname"})," all lowercase variable."]}),"\n",(0,t.jsx)(n.h3,{id:"set--u",children:"set -u"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"set -u"})," affects variables. When set, a reference to any variable you haven't previously defined is an error, and causes the program to immediately exit. Languages like Python, C, Java and more all behave the same way, for all sorts of good reasons.\nNow let's change the script a bit and look how it performs."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="variable.sh"',children:'\n#!/bin/bash\nset -e\nset -u\nfirstName="Thor"\nfullName="$firstname, the Odin\'s son"\necho "$fullName"\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"[thor@marvel-studios ~]$ ./variable.sh \n./variable.sh: line 5: firstname: unbound variable\n"})}),"\n",(0,t.jsx)(n.p,{children:"Yeah kind of unhelpful message for some reasons but it is better than a silent bug."}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"set -u"})," does not exits out if we have ",(0,t.jsx)(n.code,{children:"$*"})," and ",(0,t.jsx)(n.code,{children:"$@"})," in our scripts - they are exceptions in  -u."]}),(0,t.jsxs)(n.p,{children:["But if you use named arguments as ",(0,t.jsx)(n.code,{children:"$1"})," and ",(0,t.jsx)(n.code,{children:"$2"})," in script then they will ",(0,t.jsx)(n.strong,{children:"throw an error"})]})]}),"\n",(0,t.jsx)(n.h2,{id:"problem-3",children:"Problem 3"}),"\n",(0,t.jsxs)(n.p,{children:["Remember in problem 1 we saw exit code returned as 0 even if there was an error and we fixed it using set -e.\nWell set -e option ",(0,t.jsx)(n.strong,{children:"does not"})," provide protection if there is a ",(0,t.jsx)(n.strong,{children:"pipe"})," character involved in the command."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="pipe.sh"',children:"\n#!/bin/bash\n\ngrep some-string /non/existent/file | sort\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ ./pipe.sh \ngrep: /non/existent/file: No such file or directory\n[thor@marvel-studios ~]$ echo $?\n0\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This indeed failed but returns a 0 exit code. Here, grep has an exit code of 2, writes an error message to ",(0,t.jsx)(n.code,{children:"stderr"}),", and an empty string to ",(0,t.jsx)(n.code,{children:"stdout"}),". This empty string is then passed through ",(0,t.jsx)(n.code,{children:"sort"}),", which happily accepts it as valid input, and returns a status code of 0. This is fine for a command line, but bad for a shell script: you almost certainly want the script to exit right then with a nonzero exit code."]}),"\n",(0,t.jsx)(n.h3,{id:"set--o-pipefail",children:"set -o pipefail"}),"\n",(0,t.jsx)(n.p,{children:"This setting prevents errors in a pipeline from being masked. If any command in a pipeline fails, that return code will be used as the return code of the whole pipeline. By default, the pipeline's return code is that of the last command - even if it succeeds."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="pipe.sh"',children:"\n#!/bin/bash\nset -o pipefail\ngrep some-string /non/existent/file | sort\n"})}),"\n",(0,t.jsx)(n.p,{children:"This will stop the execution when it finds that file does not exists and never passes the ouutput to the sort command"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ ./pipe.sh \ngrep: /non/existent/file: No such file or directory\n[thor@marvel-studios ~]$ echo $?\n2\n"})}),"\n",(0,t.jsx)(n.h2,{id:"disable-strict-mode-temporarily",children:"Disable strict mode temporarily"}),"\n",(0,t.jsx)(n.p,{children:"Sometimes your script needs to source a file that doesn't work with your strict mode. What then?"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"source /path-to-file/file.env\n# Your strict-mode script immediately exits here,\n# with a fatal error.\n"})}),"\n",(0,t.jsx)(n.p,{children:"The solution is to"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Temporarily disable that aspect of strict mode."}),"\n",(0,t.jsx)(n.li,{children:"Source the document."}),"\n",(0,t.jsx)(n.li,{children:"Re-enable, on the next line."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The most common time you'll need this will be when the document references an undefined variable. Temporarily allow such a transgression with ",(0,t.jsx)(n.strong,{children:"set +u"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"set +u\nsource some/bad/file.env\nset -u\n"})}),"\n",(0,t.jsxs)(n.p,{children:["(Remember, set +u ",(0,t.jsx)(n.strong,{children:"disables"})," this variable strictness, and set -u ",(0,t.jsx)(n.strong,{children:"enables"})," it. A bit counterintuitive)\nSame applies for set -e and set -o. There are few more options which I don't think are that neccessary, maybe sometime in the future I will update this document if I encounter any other use case."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["For scripts having many number of lines it is often better option to select ",(0,t.jsx)(n.strong,{children:"python"})," for scripting because bash is slow and error prone and since python actually ships preinstalled with most of the distributions it makes sense to use it."]})})]})}function c(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>o});var t=s(7294);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);