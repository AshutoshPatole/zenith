"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2381],{1753:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>r});var a=n(5893),o=n(1151);const s={sidebar_position:2,slug:"/deployments",title:"Deployment"},l=void 0,i={id:"Containers/OpenShift/Workloads/deployments",title:"Deployment",description:"---",source:"@site/docs/Containers/OpenShift/Workloads/deployments.mdx",sourceDirName:"Containers/OpenShift/Workloads",slug:"/deployments",permalink:"/zenith/deployments",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"AshutoshPatole18",lastUpdatedAt:1706788254,formattedLastUpdatedAt:"Feb 1, 2024",sidebarPosition:2,frontMatter:{sidebar_position:2,slug:"/deployments",title:"Deployment"},sidebar:"tutorialSidebar",previous:{title:"Pod LifeCycle",permalink:"/zenith/pod-lifecycle"},next:{title:"ReplicaSets",permalink:"/zenith/replicasets"}},d={},r=[{value:"Rollover (aka multiple updates in-flight)",id:"rollover-aka-multiple-updates-in-flight",level:3},{value:"Rolling Update Deployment",id:"rolling-update-deployment",level:3},{value:"Max Unavailable",id:"max-unavailable",level:4},{value:"Max Surge",id:"max-surge",level:4},{value:"Progress Deadline Seconds",id:"progress-deadline-seconds",level:4},{value:"Min Ready Seconds",id:"min-ready-seconds",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h3:"h3",h4:"h4",hr:"hr",p:"p",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.p,{children:"A Deployment provides declarative updates for Pods and ReplicaSets."}),"\n",(0,a.jsx)(t.p,{children:"You describe a desired state in a Deployment, and the Deployment Controller changes the actual state to the desired state at a controlled rate. You can define Deployments to create new ReplicaSets, or to remove existing Deployments and adopt all their resources with new Deployments."}),"\n",(0,a.jsx)(t.admonition,{type:"danger",children:(0,a.jsx)(t.p,{children:"Do not manage ReplicaSets owned by a Deployment"})}),"\n",(0,a.jsxs)(t.p,{children:["Refer to the commands related to deployment ",(0,a.jsx)(t.a,{href:"/frequent-commands",children:"here"})]}),"\n",(0,a.jsxs)(t.admonition,{type:"info",children:[(0,a.jsx)(t.p,{children:"You must specify an appropriate selector and Pod template labels in a Deployment."}),(0,a.jsx)(t.p,{children:"Do not overlap labels or selectors with other controllers (including other Deployments and StatefulSets). Kubernetes doesn't stop you from overlapping, and if multiple controllers have overlapping selectors those controllers might conflict and behave unexpectedly."})]}),"\n",(0,a.jsx)(t.p,{children:"Deployment ensures that only a certain number of Pods are down while they are being updated. By default, it ensures that at least 75% of the desired number of Pods are up (25% max unavailable)."}),"\n",(0,a.jsx)(t.p,{children:"Deployment also ensures that only a certain number of Pods are created above the desired number of Pods. By default, it ensures that at most 125% of the desired number of Pods are up (25% max surge)."}),"\n",(0,a.jsx)(t.p,{children:"Deployment first creates a new Pod, then deletes an old Pod, and creates another new one. It does not kill old Pods until a sufficient number of new Pods have come up, and does not create new Pods until a sufficient number of old Pods have been killed. It makes sure that at least 3 Pods are available and that at max 4 Pods in total are available. In case of a Deployment with 4 replicas, the number of Pods would be between 3 and 5."}),"\n",(0,a.jsx)(t.h3,{id:"rollover-aka-multiple-updates-in-flight",children:"Rollover (aka multiple updates in-flight)"}),"\n",(0,a.jsxs)(t.p,{children:["Each time a new Deployment is observed by the Deployment controller, a ReplicaSet is created to bring up the desired Pods. If the Deployment is updated, the existing ReplicaSet that controls Pods whose labels match ",(0,a.jsx)(t.code,{children:".spec.selector"})," but whose template does not match ",(0,a.jsx)(t.code,{children:".spec.template"})," are scaled down. Eventually, the new ReplicaSet is scaled to ",(0,a.jsx)(t.code,{children:".spec.replicas"})," and all old ReplicaSets is scaled to 0."]}),"\n",(0,a.jsx)(t.p,{children:"If you update a Deployment while an existing rollout is in progress, the Deployment creates a new ReplicaSet as per the update and start scaling that up, and rolls over the ReplicaSet that it was scaling up previously -- it will add it to its list of old ReplicaSets and start scaling it down."}),"\n",(0,a.jsxs)(t.p,{children:["For example, suppose you create a Deployment to create 5 replicas of ",(0,a.jsx)(t.code,{children:"nginx:1.14.2"}),", but then update the Deployment to create 5 replicas of ",(0,a.jsx)(t.code,{children:"nginx:1.16.1"}),", when only 3 replicas of ",(0,a.jsx)(t.code,{children:"nginx:1.14.2"})," had been created. In that case, the Deployment immediately starts killing the 3 ",(0,a.jsx)(t.code,{children:"nginx:1.14.2"})," Pods that it had created, and starts creating ",(0,a.jsx)(t.code,{children:"nginx:1.16.1"})," Pods. It does not wait for the 5 replicas of ",(0,a.jsx)(t.code,{children:"nginx:1.14.2"})," to be created before changing course."]}),"\n",(0,a.jsx)(t.h3,{id:"rolling-update-deployment",children:"Rolling Update Deployment"}),"\n",(0,a.jsx)(t.p,{children:"The Deployment updates Pods in a rolling update fashion when .spec.strategy.type==RollingUpdate. You can specify maxUnavailable and maxSurge to control the rolling update process."}),"\n",(0,a.jsx)(t.h4,{id:"max-unavailable",children:"Max Unavailable"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:".spec.strategy.rollingUpdate.maxUnavailable"})," is an optional field that specifies the maximum number of Pods that can be unavailable during the update process. The value can be an absolute number (for example, 5) or a percentage of desired Pods (for example, 10%). The absolute number is calculated from percentage by rounding down. The value cannot be 0 if ",(0,a.jsx)(t.code,{children:".spec.strategy.rollingUpdate.maxSurge"})," is 0. The default value is 25%."]}),"\n",(0,a.jsx)(t.p,{children:"For example, when this value is set to 30%, the old ReplicaSet can be scaled down to 70% of desired Pods immediately when the rolling update starts. Once new Pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of Pods available at all times during the update is at least 70% of the desired Pods."}),"\n",(0,a.jsx)(t.h4,{id:"max-surge",children:"Max Surge"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:".spec.strategy.rollingUpdate.maxSurge"})," is an optional field that specifies the maximum number of Pods that can be created over the desired number of Pods. The value can be an absolute number (for example, 5) or a percentage of desired Pods (for example, 10%). The value cannot be 0 if MaxUnavailable is 0. The absolute number is calculated from the percentage by rounding up. The default value is 25%."]}),"\n",(0,a.jsx)(t.p,{children:"For example, when this value is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new Pods does not exceed 130% of desired Pods. Once old Pods have been killed, the new ReplicaSet can be scaled up further, ensuring that the total number of Pods running at any time during the update is at most 130% of desired Pods."}),"\n",(0,a.jsx)(t.h4,{id:"progress-deadline-seconds",children:"Progress Deadline Seconds"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:".spec.progressDeadlineSeconds"})," is an optional field that specifies the number of seconds you want to wait for your Deployment to progress before the system reports back that the Deployment has failed progressing - surfaced as a condition with ",(0,a.jsx)(t.code,{children:"type: Progressing"}),", ",(0,a.jsx)(t.code,{children:'status: "False'}),'". and ',(0,a.jsx)(t.code,{children:"reason: ProgressDeadlineExceeded"})," in the status of the resource. The Deployment controller will keep retrying the Deployment. This defaults to 600."]}),"\n",(0,a.jsxs)(t.p,{children:["If specified, this field needs to be greater than ",(0,a.jsx)(t.code,{children:".spec.minReadySeconds"}),"."]}),"\n",(0,a.jsx)(t.h3,{id:"min-ready-seconds",children:"Min Ready Seconds"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:".spec.minReadySeconds"})," is an optional field that specifies the minimum number of seconds for which a newly created Pod should be ready without any of its containers crashing, for it to be considered available. This defaults to 0 (the Pod will be considered available as soon as it is ready). See ",(0,a.jsx)(t.a,{href:"/pod-lifecycle",children:"Container probe"})]})]})}function p(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>l});var a=n(7294);const o={},s=a.createContext(o);function l(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);