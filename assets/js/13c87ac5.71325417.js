"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6109],{5271:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>d});var r=s(5893),i=s(1151);const t={sidebar_position:4,slug:"/brace-expansion",title:"Brace Expansions",tags:["script"]},a=void 0,o={id:"Linux/Script/brace_expansions",title:"Brace Expansions",description:"---",source:"@site/docs/Linux/Script/4_brace_expansions.mdx",sourceDirName:"Linux/Script",slug:"/brace-expansion",permalink:"/zenith/brace-expansion",draft:!1,unlisted:!1,tags:[{label:"script",permalink:"/zenith/tags/script"}],version:"current",lastUpdatedBy:"AshutoshPatole18",lastUpdatedAt:1706787778,formattedLastUpdatedAt:"Feb 1, 2024",sidebarPosition:4,frontMatter:{sidebar_position:4,slug:"/brace-expansion",title:"Brace Expansions",tags:["script"]},sidebar:"tutorialSidebar",previous:{title:"Parameter Expansion",permalink:"/zenith/parameter-expansion"},next:{title:"redirection",permalink:"/zenith/redirection-operators"}},c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Nested braces",id:"nested-braces",level:2},{value:"mkdir use case",id:"mkdir-use-case",level:2},{value:"Increment values",id:"increment-values",level:2}];function l(e){const n={admonition:"admonition",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(n.p,{children:"Brace expansion is a mechanism by which arbitrary strings may be generated. The specified strings are used to generate all possible combinations with the optional surrounding prefixes and suffixes. Usually it's used to generate mass-arguments for a command, that follows a specific naming-scheme."}),"\n",(0,r.jsxs)(n.p,{children:["Patterns to be brace expanded take the form of an optional ",(0,r.jsx)(n.strong,{children:"preamble"}),", followed by either a series of comma-separated strings or a sequence expression between a pair of braces, followed by an optional ",(0,r.jsx)(n.strong,{children:"postscript"}),". The preamble is prefixed to each string contained within the braces, and the postscript is then appended to each resulting string, expanding left to right."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ echo {a,b}c\nac bc\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["The results of each expanded string are ",(0,r.jsx)(n.strong,{children:"NOT"})," sorted; left to right order is preserved."]})}),"\n",(0,r.jsx)(n.p,{children:"Without the optional prefix and suffix strings, the result is just a space-separated list of the given strings."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ echo {I,want,my,hammer}\nI want my hammer\n"})}),"\n",(0,r.jsxs)(n.p,{children:["With prefix or suffix strings, the result is a space-separated list of ",(0,r.jsx)(n.strong,{children:"all possible combinations"})," of prefix or suffix specified strings:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ echo @{I,want,my,hammer}$\n@I$ @want$ @my$ @hammer$\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["A correctly-formed brace expansion must contain ",(0,r.jsx)(n.strong,{children:"unquoted"})," opening and closing ",(0,r.jsx)(n.strong,{children:"braces"}),", and at least one unquoted comma or a valid sequence expression. Any incorrectly formed brace expansion is left unchanged."]})}),"\n",(0,r.jsx)(n.p,{children:"Now this can be really useful in some cases like for loop, making nested directory structures and pattern matching."}),"\n",(0,r.jsxs)(n.p,{children:["Brace expansion using ranges is written giving the startpoint and the endpoint of the range. This is a ",(0,r.jsx)(n.strong,{children:'"sequence expression"'}),". The sequences can be of two types"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"integers (optionally zero padded, optionally with a given increment)"}),"\n",(0,r.jsx)(n.li,{children:"characters"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ echo {1..10}\n1 2 3 4 5 6 7 8 9 10\n[thor@marvel-studios ~]$ echo {a..z}\na b c d e f g h i j k l m n o p q r s t u v w x y z\n[thor@marvel-studios ~]$ echo {A..Z}\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"But if you mix them together like"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ echo {1..z}\n{1..z}\n"})}),"\n",(0,r.jsx)(n.p,{children:"It doesn't work."}),"\n",(0,r.jsx)(n.h2,{id:"nested-braces",children:"Nested braces"}),"\n",(0,r.jsx)(n.p,{children:"Braces can be nested as well"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$  echo {A..Z}{0..9}\nA0 A1 A2 A3 A4 A5 A6 A7 A8 A9 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 C0 C1 C2 C3 C4 C5 C6\nC7 C8 C9 D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 F0 F1 F2 F3\nF4 F5 F6 F7 F8 F9 G0 G1 G2 G3 G4 G5 G6 G7 G8 G9 H0 H1 H2 H3 H4 H5 H6 H7 H8 H9 I0\nI1 I2 I3 I4 I5 I6 I7 I8 I9 J0 J1 J2 J3 J4 J5 J6 J7 J8 J9 K0 K1 K2 K3 K4 K5 K6 K7\nK8 K9 L0 L1 L2 L3 L4 L5 L6 L7 L8 L9 M0 M1 M2 M3 M4 M5 M6 M7 M8 M9 N0 N1 N2 N3 N4\nN5 N6 N7 N8 N9 O0 O1 O2 O3 O4 O5 O6 O7 O8 O9 P0 P1 P2 P3 P4 P5 P6 P7 P8 P9 Q0 Q1\nQ2 Q3 Q4 Q5 Q6 Q7 Q8 Q9 R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 S0 S1 S2 S3 S4 S5 S6 S7 S8\nS9 T0 T1 T2 T3 T4 T5 T6 T7 T8 T9 U0 U1 U2 U3 U4 U5 U6 U7 U8 U9 V0 V1 V2 V3 V4 V5\nV6 V7 V8 V9 W0 W1 W2 W3 W4 W5 W6 W7 W8 W9 X0 X1 X2 X3 X4 X5 X6 X7 X8 X9 Y0 Y1 Y2\nY3 Y4 Y5 Y6 Y7 Y8 Y9 Z0 Z1 Z2 Z3 Z4 Z5 Z6 Z7 Z8 Z9\n"})}),"\n",(0,r.jsx)(n.p,{children:"This can probably solve a lot of time in typing in some cases."}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsx)(n.p,{children:"For generating decimal numbers using expansion use something like this"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ echo 1.{0..9}\n1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9\n"})})]}),"\n",(0,r.jsx)(n.h2,{id:"mkdir-use-case",children:"mkdir use case"}),"\n",(0,r.jsx)(n.p,{children:"Brace expansion can be so handy in many cases. One of the use case is"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ mkdir -p {outside,outside2}/{inside,inside2}/{room1,room2,room3}\n[thor@marvel-studios ~]$ tree\n.\n\u251c\u2500\u2500 brace.sh\n\u251c\u2500\u2500 hello.sh\n\u251c\u2500\u2500 outside\n\u2502   \u251c\u2500\u2500 inside\n\u2502   \u2502   \u251c\u2500\u2500 room1\n\u2502   \u2502   \u251c\u2500\u2500 room2\n\u2502   \u2502   \u2514\u2500\u2500 room3\n\u2502   \u2514\u2500\u2500 inside2\n\u2502       \u251c\u2500\u2500 room1\n\u2502       \u251c\u2500\u2500 room2\n\u2502       \u2514\u2500\u2500 room3\n\u251c\u2500\u2500 outside2\n\u2502   \u251c\u2500\u2500 inside\n\u2502   \u2502   \u251c\u2500\u2500 room1\n\u2502   \u2502   \u251c\u2500\u2500 room2\n\u2502   \u2502   \u2514\u2500\u2500 room3\n\u2502   \u2514\u2500\u2500 inside2\n\u2502       \u251c\u2500\u2500 room1\n\u2502       \u251c\u2500\u2500 room2\n\u2502       \u2514\u2500\u2500 room3\n\u251c\u2500\u2500 pipe.sh\n\u251c\u2500\u2500 sample.sh\n\u251c\u2500\u2500 set.sh\n\u2514\u2500\u2500 variable.sh\n\n18 directories, 6 files\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"caution",children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"DO NOT KEEP SPACE IN BETWEEN VALUES"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ echo {a, b}d  # Note space between a,<space>b\n{a, b}d\n[thor@marvel-studios ~]$ echo {a,b}d\nad bd\n"})})]}),"\n",(0,r.jsx)(n.h2,{id:"increment-values",children:"Increment values"}),"\n",(0,r.jsx)(n.p,{children:"Passing an extra field at the end acts as an increment or decrement value"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$ echo {1..10..2}\n1 3 5 7 9\n[thor@marvel-studios ~]$ echo {10..1..2}\n10 8 6 4 2\n"})}),"\n",(0,r.jsx)(n.p,{children:"This also works with characters"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"[thor@marvel-studios ~]$  echo {a..z..3}\na d g j m p s v y\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>a});var r=s(7294);const i={},t=r.createContext(i);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);