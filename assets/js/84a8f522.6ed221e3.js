"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[642],{94:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>n,metadata:()=>o,toc:()=>l});var s=r(5893),a=r(1151);const n={sidebar_position:2,slug:"/olm",title:"Operator Lifecycle Manager"},i=void 0,o={id:"Containers/OpenShift/Operator/olm",title:"Operator Lifecycle Manager",description:"---",source:"@site/docs/Containers/OpenShift/Operator/olm.mdx",sourceDirName:"Containers/OpenShift/Operator",slug:"/olm",permalink:"/zenith/olm",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"AshutoshPatole18",lastUpdatedAt:1706788254,formattedLastUpdatedAt:"Feb 1, 2024",sidebarPosition:2,frontMatter:{sidebar_position:2,slug:"/olm",title:"Operator Lifecycle Manager"},sidebar:"tutorialSidebar",previous:{title:"Machine Config Operator",permalink:"/zenith/mco"},next:{title:"OpenShift Update Service",permalink:"/zenith/osus"}},c={},l=[{value:"OLM resources",id:"olm-resources",level:2},{value:"Cluster service version",id:"cluster-service-version",level:2},{value:"Catalog source",id:"catalog-source",level:2},{value:"Subscription",id:"subscription",level:2},{value:"Install plan",id:"install-plan",level:2},{value:"Operator groups",id:"operator-groups",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.hr,{}),"\n",(0,s.jsxs)(t.p,{children:["Operator Lifecycle Manager (OLM) helps users install, update, and manage the lifecycle of Kubernetes native applications (Operators) and their associated services running across their OpenShift Container Platform clusters. It is part of the ",(0,s.jsx)(t.a,{href:"https://operatorframework.io/",children:"Operator Framework"}),", an open source toolkit designed to manage Operators in an effective, automated, and scalable way."]}),"\n",(0,s.jsx)(t.h2,{id:"olm-resources",children:"OLM resources"}),"\n",(0,s.jsx)(t.p,{children:"The following custom resource definitions (CRDs) are defined and managed by Operator Lifecycle Manager (OLM):"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Resource"}),(0,s.jsx)(t.th,{children:"Short name"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"ClusterServiceVersion"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"csv"})}),(0,s.jsx)(t.td,{children:"Application metadata. For example: name, version, icon, required resources."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"CatalogSource"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"catsrc"})}),(0,s.jsx)(t.td,{children:"A repository of CSVs, CRDs, and packages that define an application."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Subscription"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"sub"})}),(0,s.jsx)(t.td,{children:"Keeps CSVs up to date by tracking a channel in a package."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"InstallPlan"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"ip"})}),(0,s.jsx)(t.td,{children:"Calculated list of resources to be created to automatically install or upgrade a CSV."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"OperatorGroup"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"og"})}),(0,s.jsxs)(t.td,{children:["Configures all Operators deployed in the same namespace as the ",(0,s.jsx)(t.code,{children:"OperatorGroup"})," object to watch for their custom resource (CR) in a list of namespaces or cluster-wide."]})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"cluster-service-version",children:"Cluster service version"}),"\n",(0,s.jsxs)(t.p,{children:["A ",(0,s.jsx)(t.em,{children:"cluster service version (CSV)"})," represents a specific version of a running Operator on an OpenShift Container Platform cluster. It is a YAML manifest created from Operator metadata that assists Operator Lifecycle Manager (OLM) in running the Operator in the cluster."]}),"\n",(0,s.jsx)(t.p,{children:"OLM requires this metadata about an Operator to ensure that it can be kept running safely on a cluster, and to provide information about how updates should be applied as new versions of the Operator are published. This is similar to packaging software for a traditional operating system; think of the packaging step for OLM as the stage at which you make your rpm, deb, or apk bundle."}),"\n",(0,s.jsx)(t.p,{children:"A CSV includes the metadata that accompanies an Operator container image, used to populate user interfaces with information such as its name, version, description, labels, repository link, and logo."}),"\n",(0,s.jsx)(t.p,{children:"A CSV is also a source of technical information required to run the Operator, such as which custom resources (CRs) it manages or depends on, RBAC rules, cluster requirements, and install strategies. This information tells OLM how to create required resources and set up the Operator as a deployment."}),"\n",(0,s.jsx)(t.h2,{id:"catalog-source",children:"Catalog source"}),"\n",(0,s.jsx)(t.p,{children:"A catalog source represents a store of metadata, typically by referencing an index image stored in a container registry. Operator Lifecycle Manager (OLM) queries catalog sources to discover and install Operators and their dependencies. The OperatorHub in the OpenShift Container Platform web console also displays the Operators provided by catalog sources."}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["Cluster administrators can view the full list of Operators provided by an enabled catalog source on a cluster by using the ",(0,s.jsx)(t.strong,{children:"Administration \u2192 Cluster Settings \u2192 Global Configuration \u2192 OperatorHub"})," page in the web console."]})}),"\n",(0,s.jsx)(t.p,{children:"The spec of a CatalogSource object indicates how to construct a pod or how to communicate with a service that serves the Operator Registry gRPC API."}),"\n",(0,s.jsx)(t.h2,{id:"subscription",children:"Subscription"}),"\n",(0,s.jsx)(t.p,{children:"A subscription, defined by a Subscription object, represents an intention to install an Operator. It is the custom resource that relates an Operator to a catalog source."}),"\n",(0,s.jsx)(t.p,{children:"Subscriptions describe which channel of an Operator package to subscribe to, and whether to perform updates automatically or manually. If set to automatic, the subscription ensures Operator Lifecycle Manager (OLM) manages and upgrades the Operator to ensure that the latest version is always running in the cluster."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"apiVersion: operators.coreos.com/v1alpha1\nkind: Subscription\nmetadata:\n  name: example-operator\n  namespace: example-namespace\nspec:\n  channel: stable\n  name: example-operator\n  source: example-catalog\n  sourceNamespace: openshift-marketplace\n"})}),"\n",(0,s.jsx)(t.p,{children:"This Subscription object defines the name and namespace of the Operator, as well as the catalog from which the Operator data can be found. The channel, such as alpha, beta, or stable, helps determine which Operator stream should be installed from the catalog source."}),"\n",(0,s.jsxs)(t.p,{children:["In addition to being easily visible from the OpenShift Container Platform web console, it is possible to identify when there is a newer version of an Operator available by inspecting the status of the related subscription. The value associated with the ",(0,s.jsx)(t.code,{children:"currentCSV"})," field is the newest version that is known to OLM, and ",(0,s.jsx)(t.code,{children:"installedCSV"})," is the version that is installed on the cluster."]}),"\n",(0,s.jsx)(t.h2,{id:"install-plan",children:"Install plan"}),"\n",(0,s.jsxs)(t.p,{children:["An install plan, defined by an ",(0,s.jsx)(t.code,{children:"InstallPlan"})," object, describes a set of resources that Operator Lifecycle Manager (OLM) creates to install or upgrade to a specific version of an Operator. The version is defined by a cluster service version (CSV)."]}),"\n",(0,s.jsxs)(t.p,{children:["To install an Operator, a cluster administrator, or a user who has been granted Operator installation permissions, must first create a ",(0,s.jsx)(t.code,{children:"Subscription"})," object. A subscription represents the intent to subscribe to a stream of available versions of an Operator from a catalog source. The subscription then creates an ",(0,s.jsx)(t.code,{children:"InstallPlan"})," object to facilitate the installation of the resources for the Operator."]}),"\n",(0,s.jsx)(t.p,{children:"The install plan must then be approved according to one of the following approval strategies:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["If the subscription's ",(0,s.jsx)(t.code,{children:"spec.installPlanApproval"})," field is set to ",(0,s.jsx)(t.code,{children:"Automatic"}),", the install plan is approved automatically."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["If the subscription's ",(0,s.jsx)(t.code,{children:"spec.installPlanApproval"})," field is set to ",(0,s.jsx)(t.code,{children:"Manual"}),", the install plan must be manually approved by a cluster administrator or user with proper permissions."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"After the install plan is approved, OLM creates the specified resources and installs the Operator in the namespace that is specified by the subscription."}),"\n",(0,s.jsx)(t.h2,{id:"operator-groups",children:"Operator groups"}),"\n",(0,s.jsxs)(t.p,{children:["An Operator group, defined by the ",(0,s.jsx)(t.code,{children:"OperatorGroup"})," resource, provides multitenant configuration to OLM-installed Operators. An Operator group selects target namespaces in which to generate required RBAC access for its member Operators."]}),"\n",(0,s.jsxs)(t.p,{children:["The set of target namespaces is provided by a comma-delimited string stored in the ",(0,s.jsx)(t.code,{children:"olm.targetNamespaces"})," annotation of a cluster service version (CSV). This annotation is applied to the CSV instances of member Operators and is projected into their deployments."]})]})}function p(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,t,r)=>{r.d(t,{Z:()=>o,a:()=>i});var s=r(7294);const a={},n=s.createContext(a);function i(e){const t=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(n.Provider,{value:t},e.children)}}}]);