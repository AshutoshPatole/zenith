"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4360],{5672:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var i=s(5893),t=s(1151);const a={sidebar_position:15,slug:"/sssd",title:"System Security Service Daemon (SSSD)"},o=void 0,r={id:"Linux/sssd",title:"System Security Service Daemon (SSSD)",description:"---",source:"@site/docs/Linux/sssd.mdx",sourceDirName:"Linux",slug:"/sssd",permalink:"/zenith/sssd",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"AshutoshPatole18",lastUpdatedAt:1706787221,formattedLastUpdatedAt:"Feb 1, 2024",sidebarPosition:15,frontMatter:{sidebar_position:15,slug:"/sssd",title:"System Security Service Daemon (SSSD)"},sidebar:"tutorialSidebar",previous:{title:"Email Protocols",permalink:"/zenith/email-protocols"},next:{title:"AWK",permalink:"/zenith/awk"}},c={},d=[{value:"SSSD Configuration",id:"sssd-configuration",level:2},{value:"Configuring NSS Services",id:"configuring-nss-services",level:3},{value:"Configuring SSSD to Work with NSS",id:"configuring-sssd-to-work-with-nss",level:4},{value:"Configuring PAM service",id:"configuring-pam-service",level:3},{value:"Creating domains",id:"creating-domains",level:2},{value:"General Rules and Options for Configuring a Domain",id:"general-rules-and-options-for-configuring-a-domain",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"The System Security Services Daemon (SSSD) provides access to different identity and authentication providers. SSSD is an intermediary between local clients and any configured data store. The local clients connect to SSSD and then SSSD contacts the external providers."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Reducing the load on identification/authentication servers"}),". Rather than having every client service attempt to contact the identification server directly, all of the local clients can contact SSSD which can connect to the identification server or check its cache."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Permitting offline authentication"}),". SSSD can optionally keep a cache of user identities and credentials that it retrieves from remote services. This allows users to authenticate to resources successfully, even if the remote identification server is offline or the local machine is offline."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Using a single user account"}),". Remote users frequently have two (or even more) user accounts, such as one for their local system and one for the organizational system. This is necessary to connect to a virtual private network (VPN). Because SSSD supports caching and offline authentication, remote users can connect to network resources simply by authenticating to their local machine and then SSSD maintains their network credentials."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"sssd-configuration",children:"SSSD Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["SSSD services and domains are configured in a .conf file. The default file is ",(0,i.jsx)(n.code,{children:"/etc/sssd/sssd.conf"}),", although alternative files can be passed to SSSD by using the -c option with the sssd command:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ sssd -c /etc/sssd/customfile.conf\n"})}),"\n",(0,i.jsx)(n.p,{children:"Both services and domains are configured individually, in separate sections on the configuration identified by [type/name] divisions, such as [domain/LDAP]. The configuration file uses simple key = value lines to set the configuration. Comment lines are set by either a hash sign (#) or a semicolon (;)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[section]\n# Comment line\nkey1 = val1\nkey10 = val1,val2\n"})}),"\n",(0,i.jsx)(n.p,{children:"SSSD currently provides several services:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"A Name Service Switch (NSS)"})," provider service that answers name service requests from the ",(0,i.jsx)(n.code,{children:"sssd_nss"})," module. This is configured in the [nss] section of the SSSD configuration."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"A PAM provider"})," service that manages a PAM conversation through the sssd_pam module. This is configured in the [pam] section of the configuration."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"monitor"}),", a special service that monitors and starts or restarts all other SSSD services. Its options are specified in the [sssd] section of the ",(0,i.jsx)(n.code,{children:"/etc/sssd/sssd.conf"})," configuration file."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"configuring-nss-services",children:"Configuring NSS Services"}),"\n",(0,i.jsxs)(n.p,{children:["SSSD provides an NSS module, ",(0,i.jsx)(n.code,{children:"sssd_nss"}),", which instructs the system to use SSSD to retrieve user information. The NSS configuration must include a reference to the SSSD module, and then the SSSD configuration sets how SSSD interacts with NSS."]}),"\n",(0,i.jsx)(n.p,{children:"The Name Service Switch (NSS) provides a central configuration for services to look up a number of configuration and name resolution services. NSS provides one method of mapping system identities and services with configuration sources.\nSSSD works with NSS as a provider services for several types of NSS maps:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Passwords (",(0,i.jsx)(n.code,{children:"passwd"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["User groups (",(0,i.jsx)(n.code,{children:"shadow"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["Groups (",(0,i.jsx)(n.code,{children:"groups"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["Netgroups (",(0,i.jsx)(n.code,{children:"netgroups"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"NSS can use multiple identity and configuration providers for any and all of its service maps. The default is to use system files for services; for SSSD to be included, the nss_sss module has to be included for the desired service type."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"[captain@marvel-studios ~]$ sudo yum install authconfig -y\nLast metadata expiration check: 2:44:17 ago on Sun 20 Mar 2022 10:18:48 AM GMT.\nDependencies resolved.\n==========================================================================================\n Package                  Architecture   Version               Repository            Size\n==========================================================================================\nInstalling:\n authselect-compat        aarch64        1.2.2-3.el8           ol8_appstream         38 k\n\nTransaction Summary\n==========================================================================================\nInstall  1 Package\n\nTotal download size: 38 k\nInstalled size: 82 k\nIs this ok [y/N]: y\nDownloading Packages:\nauthselect-compat-1.2.2-3.el8.aarch64.rpm                 792 kB/s |  38 kB     00:00\n------------------------------------------------------------------------------------------\nTotal                                                     758 kB/s |  38 kB     00:00\nRunning transaction check\nTransaction check succeeded.\nRunning transaction test\nTransaction test succeeded.\nRunning transaction\n  Preparing        :                                                                  1/1\n  Installing       : authselect-compat-1.2.2-3.el8.aarch64                            1/1\n  Running scriptlet: authselect-compat-1.2.2-3.el8.aarch64                            1/1\n  Verifying        : authselect-compat-1.2.2-3.el8.aarch64                            1/1\n\nInstalled:\n  authselect-compat-1.2.2-3.el8.aarch64\n\nComplete!\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"[captain@marvel-studios ~]$ authconfig --enablesssd --update\nRunning authconfig compatibility tool.\nThe purpose of this tool is to enable authentication against chosen services with authselect and minimum configuration. It does not provide all capabilities of authconfig.\n\nIMPORTANT: authconfig is replaced by authselect, please update your scripts.\nSee man authselect-migration(7) to help you with migration to authselect\n\nExecuting: /usr/bin/authselect check\nExecuting: /usr/bin/authselect select sssd --force\nExecuting: /usr/bin/systemctl enable sssd.service\nExecuting: /usr/bin/systemctl stop sssd.service\nExecuting: /usr/bin/systemctl start sssd.service\n"})}),"\n",(0,i.jsx)(n.p,{children:"This automatically configures the password, shadow, group, and netgroups services maps to use the SSSD module:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"passwd:     files sss\nshadow:     files sss\ngroup:      files sss\n\nnetgroup:   files sss\n"})}),"\n",(0,i.jsx)(n.h4,{id:"configuring-sssd-to-work-with-nss",children:"Configuring SSSD to Work with NSS"}),"\n",(0,i.jsx)(n.p,{children:"The options and configuration that SSSD uses to service NSS requests are configured in the SSSD configuration file, in the [nss] services section. Open the sssd.conf file and add these lines"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="sssd.conf"',children:"[sssd]\nconfig_file_version = 2\nreconnection_retries = 3\nsbus_timeout = 30\nservices = nss  # add nss as a service\n\n###\n\n[nss]\nfilter_groups = root\nfilter_users = root\nreconnection_retries = 3\nentry_cache_timeout = 300\nentry_cache_nowait_percentage = 75\n"})}),"\n",(0,i.jsx)(n.p,{children:"and then restart the sssd service"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"[captain@marvel-studios ~]$ sudo systemctl restart sssd\n"})}),"\n",(0,i.jsx)(n.h3,{id:"configuring-pam-service",children:"Configuring PAM service"}),"\n",(0,i.jsxs)(n.p,{children:["SSSD provides a PAM module, ",(0,i.jsx)(n.code,{children:"sssd_pam"}),", which instructs the system to use SSSD to retrieve user information. The PAM configuration must include a reference to the SSSD module, and then the SSSD configuration sets how SSSD interacts with PAM."]}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsx)(n.p,{children:"A mistake in the PAM configuration file can lock users out of the system completely. Always back up the configuration files before performing any changes, and keep a session open so that any changes can be reverted."})}),"\n",(0,i.jsxs)(n.p,{children:["To configure the PAM service:\nremove the ",(0,i.jsx)(n.code,{children:"/etc/pam.d/system-auth"})," symlink"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"[root@server ~]$ rm /etc/pam.d/system-auth\nrm: remove symbolic link `/etc/pam.d/system-auth'? y\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Create a new ",(0,i.jsx)(n.code,{children:"/etc/pam.d/system-auth-local"})," file. One easy way to do this is simply to copy the ",(0,i.jsx)(n.code,{children:"/etc/pam.d/system-auth-ac"})," file."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"[root@server ~]$ cp /etc/pam.d/system-auth-ac /etc/pam.d/system-auth-local\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Create a new symlink between the ",(0,i.jsx)(n.code,{children:"/etc/pam.d/system-auth-local"})," file and ",(0,i.jsx)(n.code,{children:"/etc/pam.d/system-auth"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"[root@server ~]$ ln -s /etc/pam.d/system-auth-local /etc/pam.d/system-auth\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Edit the ",(0,i.jsx)(n.code,{children:"/etc/pam.d/system-auth-local"})," file, and add all of the SSSD modules to the PAM configuration."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"#%PAM-1.0\n...\nauth        sufficient    pam_sss.so use_first_pass\nauth        required      pam_deny.so\n\n...\naccount [default=bad success=ok user_unknown=ignore] pam_sss.so\naccount     required      pam_permit.so\n\n...\npassword    sufficient    pam_sss.so use_authtok\npassword    required      pam_deny.so\n\n...\nsession     sufficient    pam_sss.so\nsession     required      pam_unix.so\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:"Open sssd.conf and add pam as a service."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"[sssd]\nconfig_file_version = 2\nreconnection_retries = 3\nsbus_timeout = 30\nservices = nss, pam  # add pam here\n"})}),"\n",(0,i.jsx)(n.p,{children:"Change or add any parameters in [pam] section"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"[pam]\nreconnection_retries = 3\noffline_credentials_expiration = 2\noffline_failed_login_attempts = 3\noffline_failed_login_delay = 5\n"})}),"\n",(0,i.jsx)(n.p,{children:"then restart the sssd service."}),"\n",(0,i.jsx)(n.h2,{id:"creating-domains",children:"Creating domains"}),"\n",(0,i.jsx)(n.p,{children:"SSSD recognizes domains, which are associated with the different identity servers. Domains are a combination of an identity provider and an authentication method. SSSD works with LDAP identity providers (including OpenLDAP, Red Hat Directory Server, and Microsoft Active Directory) and can use native LDAP authentication or Kerberos authentication."}),"\n",(0,i.jsxs)(n.p,{children:["As long as they belong to different domains, SSSD can recognize different users with the same username. For example, SSSD can successfully authenticate both captain in the ldap.example.com domain and captain in the ldap.otherexample.com domain. SSSD allows requests using fully-qualified domain names, so requesting information for ",(0,i.jsx)(n.a,{href:"mailto:captain@ldap.example.com",children:"captain@ldap.example.com"})," returns the proper user account. Specifying only the username returns the user for whichever domain comes first in the lookup order."]}),"\n",(0,i.jsx)(n.h3,{id:"general-rules-and-options-for-configuring-a-domain",children:"General Rules and Options for Configuring a Domain"}),"\n",(0,i.jsx)(n.p,{children:"A domain configuration defines the identity provider, the authentication provider, and any specific configuration to access the information in those providers. There are two types of identity providers \u2014 LDAP and proxy \u2014three types of authentication providers \u2014 LDAP, Kerberos, and proxy. The identity and authentication providers can be configured in any combination in a domain entry."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"domains = LOCAL,Name\n\n[domain/Name]\nid_provider = type\nauth_provider = type\nprovider_specific = value\nglobal = value\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"global"})," attributes are available to any type of domain, such as cache and time out settings. Each identity and authentication provider has its own set of required and optional configuration parameters."]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>r,a:()=>o});var i=s(7294);const t={},a=i.createContext(t);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);